local fn = vim.fn

-- Automatically install packer
local install_path = fn.stdpath("data") .. "/site/pack/packer/start/packer.nvim"
if fn.empty(fn.glob(install_path)) > 0 then
PACKER_BOOTSTRAP = fn.system({
    "git",
    "clone",
    "--depth",
    "1",
    "https://github.com/wbthomason/packer.nvim",
    install_path,
    })
  print("Installing packer close and reopen Neovim...")
vim.cmd([[packadd packer.nvim]])
  end

  -- Autocommand that reloads neovim whenever you save the plugins.lua file
  vim.cmd([[
      augroup packer_user_config
      autocmd!
      autocmd BufWritePost plugins.lua source <afile> | PackerSync
      augroup end
  ]])

  -- Use a protected call so we don't error out on first use
  local status_ok, packer = pcall(require, "packer")
  if not status_ok then
  return
  end

  -- Have packer use a popup window
  packer.init({
      display = {
      open_fn = function()
      return require("packer.util").float({ border = "rounded" })
      end,
      },
      })

  -- Install your plugins here
return packer.startup(function(use)
    -- My plugins here
    -- Package Manager
    use 'wbthomason/packer.nvim'

    -- Visual
    use 'nvim-tree/nvim-web-devicons'
    use 'folke/todo-comments.nvim'
    use {
      "petertriho/nvim-scrollbar",
      event = {
        "BufWinEnter",
        "CmdwinLeave",
        "TabEnter",
        "TermEnter",
        "TextChanged",
        "VimResized",
        "WinEnter",
        "WinScrolled",
      },
      config = function()
        require("scrollbar").setup {}
      end,
    }

-- noice
use "MunifTanjim/nui.nvim"
use "rcarriga/nvim-notify"
use {
  "folke/noice.nvim",
  event = { "BufRead", "BufNewFile", "InsertEnter", "CmdlineEnter" },
  module = { "noice" },
  requires = {
    { "MunifTanjim/nui.nvim" },
    {
      "rcarriga/nvim-notify",
      module = { "notify" },
      config = function()
        require("notify").setup { }
      end
    },
  },
  wants = { "nvim-treesitter" },
  setup = function()
    if not _G.__vim_notify_overwritten then
      vim.notify = function()
        local arg = { }
        require "notify"
        require "noice"
        vim.schedule(function()
          vim.notify(unpack(args))
        end)
      end
      _G.__vim_notify_overwritten = true
    end
  end,
  config = function()
    require("noice").setup {
    }
  end
}

-- Color schema
use 'EdenEast/nightfox.nvim'

-- LSP and autocomplete
use 'neovim/nvim-lspconfig'
use 'williamboman/mason-lspconfig.nvim'
use {
  'williamboman/mason.nvim',
    event = {
      "CmdlineEnter",
    },
    config = function()
      require("mason").setup {}
  end,
}

use {
  "hrsh7th/nvim-cmp",
    module = { "cmp" },
    requires = {
      { "hrsh7th/cmp-nvim-lsp", event = { "InsertEnter" } },
      { "hrsh7th/cmp-nvim-lsp-signature-help", event = { "InsertEnter" } },
      { "hrsh7th/cmp-buffer", event = { "InsertEnter" } },
      { "hrsh7th/cmp-path", event = { "InsertEnter" } },
      { "hrsh7th/cmp-emoji", event = { "InsertEnter" } },
      { "hrsh7th/cmp-cmdline", event = { "InsertEnter" } },
      { "hrsh7th/vim-vsnip", event = { "InsertEnter" } },
    },
    config = function()
      require("cmp").setup{

      }
  end,
}
use "hrsh7th/cmp-nvim-lsp"
use "hrsh7th/cmp-nvim-lsp-signature-help"
use "hrsh7th/cmp-buffer"
use "hrsh7th/cmp-path"
use "hrsh7th/cmp-emoji"
use "hrsh7th/cmp-cmdline"
use "hrsh7th/vim-vsnip"
use 'folke/lsp-colors.nvim'
use 'folke/trouble.nvim'
use 'j-hui/fidget.nvim'

-- fzf
use "nvim-lua/plenary.nvim"
use {
  "nvim-telescope/telescope.nvim",
    module = { "telescope" },
    requires = { "nvim-lua/plenary.nvim" }, 
    wants = { },
    setup = function()
      local function builtin(name)
        return function(opt)
          return function()
          return require("telescope.builtin")[name](opt or {})
          end
        end
      end

      local function extensions(name, prop)
        return function(opt)
          return function()
            local telescope = require "telescope"
            telescope.load_extension(name)
            return telescope.extensions[name][prop](opt or {})
          end
        end
      end

      vim.keymap.set("n", "<Leader>ff", builtin "find_files" {})
      vim.keymap.set("n", "<Leader>fg", builtin "live_grep" {})
      vim.keymap.set("n", "<Leader>fh", builtin "help_tags" { lang = "en" })
      vim.keymap.set("n", "<Leader>fb", builtin "buffers" {})
      end,
    config = function()
      require("telescope").setup {
      }
  end
}
-- PowerLine
use 'nvim-lualine/lualine.nvim'

-- Fileruse 
use {
  'nvim-tree/nvim-tree.lua',
    module = { "nvim-tree" },
    setup = function()
      vim.keymap.set("n", "<C-n>", function()
          require("nvim-tree.api").tree.toggle()
          end)
      end,

    requires = {
      'nvim-tree/nvim-web-devicons', -- optional, for file icons
    },
    config = function()
      require("nvim-tree").setup {
        sort_by = "case_sensitive",
        view = {
          width = 30,
          mappings = {
            list = {
              { key = "u", action = "dir_up" },
            },
          },
        },
        renderer = {
          group_empty = true,
        },
        filters = {
          dotfiles = true,
        },
      }
  end,
    tag = 'nightly' -- optional, updated every week. (see issue #1193)
} 


-- Treesitter
use({ "nvim-treesitter/nvim-treesitter", { run = ":TSUpdate" } })
use({ "nvim-telescope/telescope-file-browser.nvim" })

-- Automatically set up your configuration after cloning packer.nvim
-- Put this at the end after all plugins
if PACKER_BOOTSTRAP then
  require("packer").sync()
end
end)


